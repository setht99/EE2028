
blink_plain_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000338  08000348  00010348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000338  08000338  00010348  2**0
                  CONTENTS
  4 .ARM          00000000  08000338  08000338  00010348  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000338  08000348  00010348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08000338  08000338  00010338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08000340  08000340  00010340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000348  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000348  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010348  2**0
                  CONTENTS, READONLY
 12 .debug_info   000000a7  00000000  00000000  00010378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000007e  00000000  00000000  0001041f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  000104a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000030  00000000  00000000  000104e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000b25  00000000  00000000  00010518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000107  00000000  00000000  0001103d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00002f65  00000000  00000000  00011144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000140a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  000140fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800031c 	.word	0x0800031c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	0800031c 	.word	0x0800031c

080001c8 <main>:

	#define LEDDELAY	200000
	#define LEDPIN  	(1 << 14)

int main(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
	volatile unsigned int i;
	volatile unsigned int *p;	// pointer declaration
	volatile unsigned int *q;	// pointer declaration

	p = (unsigned int *)RCC_AHB2RSTR;
 80001ce:	4b26      	ldr	r3, [pc, #152]	; (8000268 <main+0xa0>)
 80001d0:	60fb      	str	r3, [r7, #12]
	*p |= (1 << 1);		// set bit[1] to reset AHB2
 80001d2:	68fb      	ldr	r3, [r7, #12]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	f043 0202 	orr.w	r2, r3, #2
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	601a      	str	r2, [r3, #0]
	*p &= ~(1 << 1);	// change bit[1] back to 0, no effect
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f023 0202 	bic.w	r2, r3, #2
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	601a      	str	r2, [r3, #0]

	p = (unsigned int *)RCC_AHB2ENR;
 80001ea:	4b20      	ldr	r3, [pc, #128]	; (800026c <main+0xa4>)
 80001ec:	60fb      	str	r3, [r7, #12]
	*p |= (1 << 1);		// AHB2 clock enable, compulsory to support peripheral registers read/write
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f043 0202 	orr.w	r2, r3, #2
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	601a      	str	r2, [r3, #0]

	p = (unsigned int *)GPIOB_MODER;
 80001fa:	4b1d      	ldr	r3, [pc, #116]	; (8000270 <main+0xa8>)
 80001fc:	60fb      	str	r3, [r7, #12]
	*p &= ~((1 << 29) | (1 << 28));	// clear GPIO mode register's bit[29:28]
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	601a      	str	r2, [r3, #0]
	*p |= (1 << 28);	// change GPIO mode register's bit[29:28] = 01, general purpose output
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	601a      	str	r2, [r3, #0]

	while(1)
	{
		p = (unsigned int *)GPIOB_BSRR;
 8000216:	4b17      	ldr	r3, [pc, #92]	; (8000274 <main+0xac>)
 8000218:	60fb      	str	r3, [r7, #12]
		q = (unsigned int *)GPIOB_ODR;
 800021a:	4b17      	ldr	r3, [pc, #92]	; (8000278 <main+0xb0>)
 800021c:	60bb      	str	r3, [r7, #8]

		if (*q & LEDPIN)	// read GPIO Output data register to check current state of Pin14
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000226:	2b00      	cmp	r3, #0
 8000228:	d00c      	beq.n	8000244 <main+0x7c>
		{
			*p &= ~((1 << 30) | (1 << 14));	// clear GPIO BSRR's bit[30] and bit[14]
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f023 2240 	bic.w	r2, r3, #1073758208	; 0x40004000
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	601a      	str	r2, [r3, #0]
			*p |= (1 << 30);	// set BSRR's bit[30], reset bit, to turn LD2 off
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	e005      	b.n	8000250 <main+0x88>
		}
		else
			*p |= (1 << 14);	// set BSRR's bit[14], set bit, to turn LD2 on
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	601a      	str	r2, [r3, #0]

		for (i = 0; i < 200000; i++);	// delay loop
 8000250:	2300      	movs	r3, #0
 8000252:	607b      	str	r3, [r7, #4]
 8000254:	e002      	b.n	800025c <main+0x94>
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	3301      	adds	r3, #1
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	4a07      	ldr	r2, [pc, #28]	; (800027c <main+0xb4>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d9f8      	bls.n	8000256 <main+0x8e>
		p = (unsigned int *)GPIOB_BSRR;
 8000264:	e7d7      	b.n	8000216 <main+0x4e>
 8000266:	bf00      	nop
 8000268:	4002102c 	.word	0x4002102c
 800026c:	4002104c 	.word	0x4002104c
 8000270:	48000400 	.word	0x48000400
 8000274:	48000418 	.word	0x48000418
 8000278:	48000414 	.word	0x48000414
 800027c:	00030d3f 	.word	0x00030d3f

08000280 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000280:	480d      	ldr	r0, [pc, #52]	; (80002b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000282:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000284:	480d      	ldr	r0, [pc, #52]	; (80002bc <LoopForever+0x6>)
  ldr r1, =_edata
 8000286:	490e      	ldr	r1, [pc, #56]	; (80002c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000288:	4a0e      	ldr	r2, [pc, #56]	; (80002c4 <LoopForever+0xe>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800028c:	e002      	b.n	8000294 <LoopCopyDataInit>

0800028e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000292:	3304      	adds	r3, #4

08000294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000298:	d3f9      	bcc.n	800028e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029a:	4a0b      	ldr	r2, [pc, #44]	; (80002c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800029c:	4c0b      	ldr	r4, [pc, #44]	; (80002cc <LoopForever+0x16>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a0:	e001      	b.n	80002a6 <LoopFillZerobss>

080002a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a4:	3204      	adds	r2, #4

080002a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a8:	d3fb      	bcc.n	80002a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002aa:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80002ae:	f000 f811 	bl	80002d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b2:	f7ff ff89 	bl	80001c8 <main>

080002b6 <LoopForever>:

LoopForever:
    b LoopForever
 80002b6:	e7fe      	b.n	80002b6 <LoopForever>
  ldr   r0, =_estack
 80002b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c4:	08000348 	.word	0x08000348
  ldr r2, =_sbss
 80002c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002cc:	20000020 	.word	0x20000020

080002d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d0:	e7fe      	b.n	80002d0 <ADC1_2_IRQHandler>
	...

080002d4 <__libc_init_array>:
 80002d4:	b570      	push	{r4, r5, r6, lr}
 80002d6:	4d0d      	ldr	r5, [pc, #52]	; (800030c <__libc_init_array+0x38>)
 80002d8:	4c0d      	ldr	r4, [pc, #52]	; (8000310 <__libc_init_array+0x3c>)
 80002da:	1b64      	subs	r4, r4, r5
 80002dc:	10a4      	asrs	r4, r4, #2
 80002de:	2600      	movs	r6, #0
 80002e0:	42a6      	cmp	r6, r4
 80002e2:	d109      	bne.n	80002f8 <__libc_init_array+0x24>
 80002e4:	4d0b      	ldr	r5, [pc, #44]	; (8000314 <__libc_init_array+0x40>)
 80002e6:	4c0c      	ldr	r4, [pc, #48]	; (8000318 <__libc_init_array+0x44>)
 80002e8:	f000 f818 	bl	800031c <_init>
 80002ec:	1b64      	subs	r4, r4, r5
 80002ee:	10a4      	asrs	r4, r4, #2
 80002f0:	2600      	movs	r6, #0
 80002f2:	42a6      	cmp	r6, r4
 80002f4:	d105      	bne.n	8000302 <__libc_init_array+0x2e>
 80002f6:	bd70      	pop	{r4, r5, r6, pc}
 80002f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002fc:	4798      	blx	r3
 80002fe:	3601      	adds	r6, #1
 8000300:	e7ee      	b.n	80002e0 <__libc_init_array+0xc>
 8000302:	f855 3b04 	ldr.w	r3, [r5], #4
 8000306:	4798      	blx	r3
 8000308:	3601      	adds	r6, #1
 800030a:	e7f2      	b.n	80002f2 <__libc_init_array+0x1e>
 800030c:	08000338 	.word	0x08000338
 8000310:	08000338 	.word	0x08000338
 8000314:	08000338 	.word	0x08000338
 8000318:	0800033c 	.word	0x0800033c

0800031c <_init>:
 800031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031e:	bf00      	nop
 8000320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000322:	bc08      	pop	{r3}
 8000324:	469e      	mov	lr, r3
 8000326:	4770      	bx	lr

08000328 <_fini>:
 8000328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032a:	bf00      	nop
 800032c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032e:	bc08      	pop	{r3}
 8000330:	469e      	mov	lr, r3
 8000332:	4770      	bx	lr
 8000334:	0000      	movs	r0, r0
	...
