
blink_pure_asm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000160  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002e8  080002f8  000102f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002e8  080002e8  000102f8  2**0
                  CONTENTS
  4 .ARM          00000000  080002e8  080002e8  000102f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002e8  080002f8  000102f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080002e8  080002e8  000102e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080002f0  080002f0  000102f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080002f8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080002f8  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102f8  2**0
                  CONTENTS, READONLY
 12 .debug_line   000000ee  00000000  00000000  00010328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00000048  00000000  00000000  00010416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000026  00000000  00000000  0001045e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00010488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00000083  00000000  00000000  000104d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000020  00000000  00000000  00010558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000002c  00000000  00000000  00010578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080002d0 	.word	0x080002d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080002d0 	.word	0x080002d0

080001c8 <main>:
@ blink PB14 by purely assembly program
main:
	@ set AHB2 Registers
	@ AHB2 peripheral reset register: RCC_AHB2RSTR
	@ reset value = 0x00000000, bit[1]=1 is to reset port_B
	LDR R6, =RCC_AHB2RSTR
 80001c8:	4e14      	ldr	r6, [pc, #80]	; (800021c <HALT+0x2>)
    LDR R0, [R6]
 80001ca:	6830      	ldr	r0, [r6, #0]
    ORR R0, 0x00000002	@ set bit[1] to 1
 80001cc:	f040 0002 	orr.w	r0, r0, #2
    STR R0, [R6]
 80001d0:	6030      	str	r0, [r6, #0]
    AND R0, 0xFFFFFFFD @ clear bit[1] to 0
 80001d2:	f020 0002 	bic.w	r0, r0, #2
    STR R0, [R6]
 80001d6:	6030      	str	r0, [r6, #0]

	@ AHB2 peripheral clock enable register: RCC_AHB2ENR
	@ reset value = 0x00000000, bit[1]=1 is to enable port B's clock
	LDR R6, =RCC_AHB2ENR
 80001d8:	4e11      	ldr	r6, [pc, #68]	; (8000220 <HALT+0x6>)
    LDR R0, [R6]
 80001da:	6830      	ldr	r0, [r6, #0]
    ORR R0, 0x00000002	@ set bit[1] to 1
 80001dc:	f040 0002 	orr.w	r0, r0, #2
    STR R0, [R6]
 80001e0:	6030      	str	r0, [r6, #0]

	@ AHB2 peripheral clocks enable in sleep and stop modes register: RCC_AHB2SMENR
	@ reset value = 0x000532FF
	LDR R6, =RCC_AHB2SMENR
 80001e2:	4e10      	ldr	r6, [pc, #64]	; (8000224 <HALT+0xa>)
    LDR R0, [R6]	@ to verify RCC_AHB2SMENR's reset value
 80001e4:	6830      	ldr	r0, [r6, #0]

	@ set mode as general purpose output mode to Port_B Pin_14
    LDR R6, =GPIOB_MODER
 80001e6:	4e10      	ldr	r6, [pc, #64]	; (8000228 <HALT+0xe>)
    LDR R0, [R6]
 80001e8:	6830      	ldr	r0, [r6, #0]
    AND R0, 0xCFFFFFFF
 80001ea:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
    ORR R0, 0x10000000
 80001ee:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
    STR R0, [R6]
 80001f2:	6030      	str	r0, [r6, #0]

080001f4 <BLINK>:
    @ Output speed is low (Default value)
    @ Pull-up/pull-down mode is no pull-up/down (Default value)

BLINK:
	@ turn on PB14 using BSRR bit[14]
	LDR R6, =GPIOB_BSRR
 80001f4:	4e0d      	ldr	r6, [pc, #52]	; (800022c <HALT+0x12>)
    LDR R0, [R6]
 80001f6:	6830      	ldr	r0, [r6, #0]
    ORR R0, 0x00004000
 80001f8:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    STR R0, [R6]
 80001fc:	6030      	str	r0, [r6, #0]
    LDR R1, =LEDDELAY
 80001fe:	490c      	ldr	r1, [pc, #48]	; (8000230 <HALT+0x16>)

08000200 <ON_DELAY>:

ON_DELAY:
	SUBS R1, #1
 8000200:	3901      	subs	r1, #1
	BNE ON_DELAY
 8000202:	d1fd      	bne.n	8000200 <ON_DELAY>

	@ turn off PB14 using BSRR bit[30]
	LDR R6, =GPIOB_BSRR
 8000204:	4e09      	ldr	r6, [pc, #36]	; (800022c <HALT+0x12>)
    LDR R0, [R6]
 8000206:	6830      	ldr	r0, [r6, #0]
    AND R0, 0xBFFFBFFF
 8000208:	f020 2040 	bic.w	r0, r0, #1073758208	; 0x40004000
    ORR R0, 0x40000000
 800020c:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    STR R0, [R6]
 8000210:	6030      	str	r0, [r6, #0]
    LDR R1, =LEDDELAY
 8000212:	4907      	ldr	r1, [pc, #28]	; (8000230 <HALT+0x16>)

08000214 <OFF_DELAY>:

OFF_DELAY:
	SUBS R1, #1
 8000214:	3901      	subs	r1, #1
	BNE OFF_DELAY
 8000216:	d1fd      	bne.n	8000214 <OFF_DELAY>

	B BLINK
 8000218:	e7ec      	b.n	80001f4 <BLINK>

0800021a <HALT>:

HALT:
	B HALT
 800021a:	e7fe      	b.n	800021a <HALT>
	LDR R6, =RCC_AHB2RSTR
 800021c:	4002102c 	.word	0x4002102c
	LDR R6, =RCC_AHB2ENR
 8000220:	4002104c 	.word	0x4002104c
	LDR R6, =RCC_AHB2SMENR
 8000224:	4002106c 	.word	0x4002106c
    LDR R6, =GPIOB_MODER
 8000228:	48000400 	.word	0x48000400
	LDR R6, =GPIOB_BSRR
 800022c:	48000418 	.word	0x48000418
    LDR R1, =LEDDELAY
 8000230:	00030d40 	.word	0x00030d40

08000234 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000234:	480d      	ldr	r0, [pc, #52]	; (800026c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000236:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000238:	480d      	ldr	r0, [pc, #52]	; (8000270 <LoopForever+0x6>)
  ldr r1, =_edata
 800023a:	490e      	ldr	r1, [pc, #56]	; (8000274 <LoopForever+0xa>)
  ldr r2, =_sidata
 800023c:	4a0e      	ldr	r2, [pc, #56]	; (8000278 <LoopForever+0xe>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000240:	e002      	b.n	8000248 <LoopCopyDataInit>

08000242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000246:	3304      	adds	r3, #4

08000248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800024a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800024c:	d3f9      	bcc.n	8000242 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800024e:	4a0b      	ldr	r2, [pc, #44]	; (800027c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000250:	4c0b      	ldr	r4, [pc, #44]	; (8000280 <LoopForever+0x16>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000254:	e001      	b.n	800025a <LoopFillZerobss>

08000256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000258:	3204      	adds	r2, #4

0800025a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800025a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800025c:	d3fb      	bcc.n	8000256 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800025e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000262:	f000 f811 	bl	8000288 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000266:	f7ff ffaf 	bl	80001c8 <main>

0800026a <LoopForever>:

LoopForever:
    b LoopForever
 800026a:	e7fe      	b.n	800026a <LoopForever>
  ldr   r0, =_estack
 800026c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000274:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000278:	080002f8 	.word	0x080002f8
  ldr r2, =_sbss
 800027c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000280:	20000020 	.word	0x20000020

08000284 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000284:	e7fe      	b.n	8000284 <ADC1_2_IRQHandler>
	...

08000288 <__libc_init_array>:
 8000288:	b570      	push	{r4, r5, r6, lr}
 800028a:	4d0d      	ldr	r5, [pc, #52]	; (80002c0 <__libc_init_array+0x38>)
 800028c:	4c0d      	ldr	r4, [pc, #52]	; (80002c4 <__libc_init_array+0x3c>)
 800028e:	1b64      	subs	r4, r4, r5
 8000290:	10a4      	asrs	r4, r4, #2
 8000292:	2600      	movs	r6, #0
 8000294:	42a6      	cmp	r6, r4
 8000296:	d109      	bne.n	80002ac <__libc_init_array+0x24>
 8000298:	4d0b      	ldr	r5, [pc, #44]	; (80002c8 <__libc_init_array+0x40>)
 800029a:	4c0c      	ldr	r4, [pc, #48]	; (80002cc <__libc_init_array+0x44>)
 800029c:	f000 f818 	bl	80002d0 <_init>
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	10a4      	asrs	r4, r4, #2
 80002a4:	2600      	movs	r6, #0
 80002a6:	42a6      	cmp	r6, r4
 80002a8:	d105      	bne.n	80002b6 <__libc_init_array+0x2e>
 80002aa:	bd70      	pop	{r4, r5, r6, pc}
 80002ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80002b0:	4798      	blx	r3
 80002b2:	3601      	adds	r6, #1
 80002b4:	e7ee      	b.n	8000294 <__libc_init_array+0xc>
 80002b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ba:	4798      	blx	r3
 80002bc:	3601      	adds	r6, #1
 80002be:	e7f2      	b.n	80002a6 <__libc_init_array+0x1e>
 80002c0:	080002e8 	.word	0x080002e8
 80002c4:	080002e8 	.word	0x080002e8
 80002c8:	080002e8 	.word	0x080002e8
 80002cc:	080002ec 	.word	0x080002ec

080002d0 <_init>:
 80002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d2:	bf00      	nop
 80002d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002d6:	bc08      	pop	{r3}
 80002d8:	469e      	mov	lr, r3
 80002da:	4770      	bx	lr

080002dc <_fini>:
 80002dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002de:	bf00      	nop
 80002e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e2:	bc08      	pop	{r3}
 80002e4:	469e      	mov	lr, r3
 80002e6:	4770      	bx	lr
